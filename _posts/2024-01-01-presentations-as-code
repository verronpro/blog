---
layout: article
title:  "Writing Presentations as Code with Reveal.js and AsciiDoctor"
date:   2024-01-01 09:00:00
categories: [revealjs, asciidoctor, developerexperience, documentationascode]
---

In my technical presentations, I’ve adopted a *presentations as code* approach using **Reveal.js** in combination with **AsciiDoctor**. This method lets me build slide decks that live alongside the codebase, with the same versioning, traceability, and automation benefits that we expect from source code.

---

### Why Presentations as Code?

Traditional presentation tools (like PowerPoint) offer visual comfort but don’t scale well for technical documentation. By switching to Reveal.js, I gain:

* **Version control**: All slides are text-based and live in Git.
* **Live inserts**: Code snippets or documentation can be pulled directly from the repository.
* **Automation**: Presentations can include outputs generated at build time.

This is particularly useful for internal workshops or tech talks where I want to demonstrate real examples — and keep them updated with the project.

---

### Markdown vs AsciiDoctor

For quick or one-off presentations, I prefer **Markdown** because of its simplicity. But when the content needs:

* conditional logic
* reusable blocks
* advanced formatting
* external includes

…then I switch to **AsciiDoctor**.

AsciiDoctor’s include directives and block macros let me pull in real examples from the actual codebase:

```adoc
[source,java]
----
include::../../src/main/java/com/company/service/ExampleService.java[tags=example1]
----
```

This way, if the implementation changes, the presentation stays accurate without extra effort.

---

### Example: Live Documentation in Slides

In a recent developer onboarding presentation, I embedded diagrams generated by PlantUML and links to internal REST API documentation. All of it was built during the CI process and pushed to a live documentation portal.

This created a consistent, trusted source of truth, and it reduced the risk of outdated examples slipping into slide decks.

---

### A Developer-Oriented Workflow

Reveal.js + AsciiDoctor lets me work on slides the same way I work on code:

* Commit messages tell the story of changes
* I can roll back, diff, and review changes in pull requests
* Others can suggest improvements via merge requests

---

### Conclusion

Writing presentations as code is more than a formatting choice — it’s a mindset that treats documentation and communication as first-class citizens of the software process.

If you're tired of syncing slides with code manually, this approach is worth exploring.
